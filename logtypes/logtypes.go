/*
Copyright 2022 Doug Edgar.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package logtypes

import (
	"context"
	"os"
)

// PodLog contains select metadata around a Kubernetes/OpenShift pod
type PodLog struct {
	User      string `json:"user,omitempty"`
	Namespace string `json:"namespace,omitempty"`
	PodName   string `json:"podName,omitempty"`
	HostIP    string `json:"hostIP,omitempty"`
	PodIP     string `json:"podIP,omitempty"`
	StartTime int64  `json:"startTime,omitempty"`
	UUID      string `json:"uuid,omitempty"`
	ClusterID string `json:"clusterID,omitempty"`
}

// ScanResult represents a scan result generated by an antivirus scanner.
type ScanResult struct {
	User        string   `json:"user,omitempty"`
	Namespace   string   `json:"namespace,omitempty"`
	PodName     string   `json:"podName,omitempty"`
	HostIP      string   `json:"hostIP,omitempty"`
	PodIP       string   `json:"podIP,omitempty"`
	StartTime   int64    `json:"startTime,omitempty"`
	UUID        string   `json:"uuid,omitempty"`
	ClusterID   string   `json:"clusterID,omitempty"`
	ContainerID string   `json:"containerID,omitempty"`
	ImageID     string   `json:"imageID,omitempty"`
	ImageName   string   `json:"imageName,omitempty"`
	ImageSource string   `json:"imageSource,omitempty"`
	Results     []Result `json:"results,omitempty"`
}

// Result is the individual result about a file that positively matched an antivirus signature
type Result struct {
	Description    string `json:"description"`
	FilePath       string `json:"filePath"`
	ScannerName    string `json:"scannerName"`
	ScannerVersion string `json:"scannerVersion"`
	SignatureName  string `json:"signatureName"`
	Timestamp      int64  `json:"timestamp"`
}

const DefaultResultsAPIVersion = "v1alpha"

type Severity string

var (
	SeverityLow       Severity = "low"
	SeverityModerate  Severity = "moderate"
	SeverityImportant Severity = "important"
	SeverityCritical  Severity = "critical"
)

// Summary represents a severy of a given result. The result can have multiple severieties
// defined.
type Summary struct {
	// Label is the human readable severity (high, important, etc.)
	Label Severity
}

var (
	ScanOptions = []string{"clamav"}
)

// APIVersions holds a slice of supported API versions.
type APIVersions struct {
	// Versions is the supported API versions
	Versions []string `json:"versions"`
}

// FilesFilter desribes callback to filter files.
type FilesFilter func(string, os.FileInfo) bool

// Scanner interface that all scanners should define.
type Scanner interface {
	// Scan will perform a scan on the given path for the given Image.
	// It should return compacted results for JSON serialization and additionally scanner
	// specific results with more details. The context object can be used to cancel the scanning process.
	Scan(ctx context.Context, path string, filter FilesFilter) ([]Result, interface{}, error)

	// Name is the scanner's name
	Name() string
}
